<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"

        default-autowire="byName" default-lazy-init="true">

    <description>spring基础配置</description>

    <mvc:annotation-driven/>

    <context:component-scan base-package="com.kanglefu"/>

    <!-- 引入属性文件 -->
    <context:property-placeholder file-encoding="UTF-8" location="classpath:props/*.properties"/>

    <!--  淘宝连接池  -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">

        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置连接池初始化大小、最小、最大 -->
        <property name="initialSize" value="20"/>
        <property name="minIdle" value="0"/>
        <property name="maxActive" value="500"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="600000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="3000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 1"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="defaultAutoCommit" value="false"/>

        <!-- stat :开启Druid的监控统计功能 config : 使用ConfigFilter(可用于解密加密的数据库密码 & 加载远程配置文件)  -->
        <property name="filters" value="stat,config"/>
        <!-- 开启数据库密码解密 (需要配置解密需要的publicKey)-->
        <property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${publickey}"/>
        <!--  加密密码生成：java -cp druid-1.0.31.jar com.alibaba.druid.filter.config.ConfigTools password  -->

        <!-- 加载远程配置文件 -->
        <!--<property name="connectionProperties" value="config.file=http://127.0.0.1/druid-pool.properties" />-->

    </bean>

    <!-- Spring Session Redis 配置 -->
    <!-- 替代默认使用cookie,这里使用的是httpheader -->

    <!--<bean id="httpSessonStrategy" class="org.springframework.session.web.http.HeaderHttpSessionStrategy">-->
    <!--<property name="headerName" value="x-auth-token"/>-->
    <!--</bean>-->

    <!--<bean id="httpSessonStrategy" class="org.springframework.session.web.http.CookieHttpSessionStrategy"/>-->

    <!--<bean id="redisHttpSessionConfiguration"-->
    <!--class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">-->
    <!--&lt;!&ndash; Session 过期时间 单位(秒) &ndash;&gt;-->
    <!--<property name="maxInactiveIntervalInSeconds" value="${spring.session.maxSeconds}"/>-->
    <!--<property name="httpSessionStrategy" ref="httpSessonStrategy"/>-->
    <!--</bean>-->
    <!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
    <!--<property name="maxTotal" value="${spring.redis.maxTotal}"/>-->
    <!--<property name="maxIdle" value="${spring.redis.maxIdle}"/>-->
    <!--<property name="maxWaitMillis" value="${spring.redis.maxWaitMillis}"/>-->
    <!--<property name="testOnBorrow" value="true"/>-->
    <!--<property name="testOnReturn" value="false"/>-->
    <!--</bean>-->
    <!--<bean id="jedisConnectionFactory"-->
    <!--class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
    <!--<property name="hostName" value="${spring.redis.hostName}"/>-->
    <!--<property name="port" value="${spring.redis.port}"/>-->
    <!--<property name="timeout" value="${spring.redis.timeout}"/>-->
    <!--<property name="password" value="${spring.redis.password}"/>-->
    <!--<property name="poolConfig" ref="jedisPoolConfig"/>-->
    <!--<property name="usePool" value="true"/>-->
    <!--</bean>-->
    <!-- Spring Session Redis 配置 END -->

    <!-- MyBatis 配置 -->
    <bean id="ysSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath*:mappings/**/*.xml"/>
    </bean>

    <!-- dataSource 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- Mybatis 通用 Mapper 配置 [继承自 org.mybatis.spring.mapper.MapperScannerConfigurer] -->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.kanglefu"/>
        <!-- 3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类 -->
        <property name="markerInterface" value="com.kanglefu.modules.base.mapper.MyBaseMapper"/>
        <!-- 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口 -->
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
                IDENTITY=SELECT REPLACE(UUID(),'-','')
                ORDER=BEFORE
            </value>
        </property>
    </bean>
</beans>